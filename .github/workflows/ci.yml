name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [23]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Grant execute permission for mvnw
      run: chmod +x ./mvnw

    - name: Compile application
      run: ./mvnw clean compile

    - name: Run tests
      run: ./mvnw test

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests (Java ${{ matrix.java-version }})
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: true

    - name: Generate JaCoCo Badge
      if: matrix.java-version == '23'
      id: jacoco
      uses: cicirello/jacoco-badge-generator@v2
      with:
        generate-branches-badge: true

    - name: Log coverage percentage
      if: matrix.java-version == '23'
      run: |
        echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
        echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

    - name: Upload JaCoCo coverage reports to Codecov
      if: matrix.java-version == '23'
      uses: codecov/codecov-action@v4
      with:
        file: ./target/site/jacoco/jacoco.xml
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Build JAR
      if: matrix.java-version == '23'
      run: ./mvnw package -DskipTests

    - name: Upload build artifacts
      if: matrix.java-version == '23'
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: target/*.jar

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Grant execute permission for mvnw
      run: chmod +x ./mvnw

    - name: Run OWASP Dependency Check
      run: |
        ./mvnw org.owasp:dependency-check-maven:check \
          -DfailBuildOnCVSS=8 \
          -DskipTestScope=true

    - name: Upload OWASP report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: owasp-report
        path: target/dependency-check-report.html

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-artifact
        path: target/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/golden-raspberry-awards-api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, security]
    if: always()
    
    steps:
    - name: Check job status
      run: |
        if [[ "${{ needs.test.result }}" == "failure" || "${{ needs.security.result }}" == "failure" ]]; then
          echo "Quality gate failed - tests or security checks failed"
          exit 1
        else
          echo "Quality gate passed - all checks successful"
        fi